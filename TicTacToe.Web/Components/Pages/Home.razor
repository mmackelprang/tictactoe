@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager Navigation

<PageTitle>Tic-Tac-Toe - Network Multiplayer</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 text-center">
            <h1 class="display-4 mb-4">🎮 Tic-Tac-Toe</h1>
            <p class="lead mb-4">Welcome to the multiplayer Tic-Tac-Toe game!</p>
            
            @if (!hasUsername)
            {
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title mb-3">Enter Your Name</h5>
                        <div class="mb-3">
                            <input type="text" 
                                   class="form-control" 
                                   @bind="username" 
                                   @bind:event="oninput"
                                   placeholder="Enter your username"
                                   maxlength="20" />
                        </div>
                        
                        <hr class="my-4" />
                        
                        <h6 class="mb-3">Game Settings</h6>
                        
                        <div class="row mb-3">
                            <div class="col-md-6 text-start">
                                <label class="form-label">Board Size</label>
                                <select class="form-select" @bind="boardSize">
                                    <option value="3">3x3 (Classic)</option>
                                    <option value="4">4x4</option>
                                    <option value="5">5x5</option>
                                    <option value="6">6x6</option>
                                    <option value="7">7x7</option>
                                    <option value="8">8x8</option>
                                    <option value="9">9x9</option>
                                    <option value="10">10x10</option>
                                </select>
                            </div>
                            <div class="col-md-6 text-start">
                                <label class="form-label">Win Condition</label>
                                <select class="form-select" @bind="winCondition">
                                    @for (int i = 3; i <= Math.Min(boardSize, 6); i++)
                                    {
                                        <option value="@i">@i in a row</option>
                                    }
                                </select>
                            </div>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-12 text-start">
                                <label class="form-label">AI Difficulty (for AI games)</label>
                                <select class="form-select" @bind="aiDifficulty">
                                    <option value="Easy">Easy</option>
                                    <option value="Medium">Medium</option>
                                    <option value="Hard">Hard</option>
                                </select>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }
                        <button class="btn btn-primary btn-lg" 
                                @onclick="EnterLobby"
                                disabled="@string.IsNullOrWhiteSpace(username)">
                            Enter Lobby
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string username = "";
    private bool hasUsername = false;
    private string errorMessage = "";
    private int boardSize = 3;
    private int winCondition = 3;
    private string aiDifficulty = "Medium";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if user already has a username stored
            try
            {
                var result = await SessionStorage.GetAsync<string>("username");
                if (result.Success && !string.IsNullOrEmpty(result.Value))
                {
                    Navigation.NavigateTo("/lobby");
                }
            }
            catch
            {
                // Ignore errors during initialization
            }
        }
    }

    private async Task EnterLobby()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            errorMessage = "Please enter a username";
            return;
        }

        if (username.Length < 2)
        {
            errorMessage = "Username must be at least 2 characters";
            return;
        }

        // Validate win condition
        if (winCondition > boardSize)
        {
            errorMessage = $"Win condition cannot be greater than board size ({boardSize})";
            return;
        }

        if (winCondition > 6)
        {
            errorMessage = "Win condition cannot be greater than 6";
            return;
        }

        // Store username and game settings, then navigate to lobby
        await SessionStorage.SetAsync("username", username.Trim());
        await SessionStorage.SetAsync("boardSize", boardSize);
        await SessionStorage.SetAsync("winCondition", winCondition);
        await SessionStorage.SetAsync("aiDifficulty", aiDifficulty);
        Navigation.NavigateTo("/lobby");
    }
}

