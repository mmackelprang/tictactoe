@page "/lobby"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using TicTacToe.Web.Models
@inject NavigationManager Navigation
@inject ProtectedSessionStorage SessionStorage
@implements IAsyncDisposable

<PageTitle>Lobby - Tic-Tac-Toe</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <h2>Game Lobby</h2>
            
            @if (!isConnected)
            {
                <div class="alert alert-info">
                    <div class="spinner-border spinner-border-sm me-2" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Connecting to lobby...
                </div>
            }
            else
            {
                <div class="alert alert-success">
                    Connected as <strong>@username</strong>
                </div>

                <div class="card mb-3">
                    <div class="card-header">
                        <h5 class="mb-0">Game Configuration</h5>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Board Size</label>
                                <select class="form-select" @bind="boardSize">
                                    <option value="3">3x3 (Classic)</option>
                                    <option value="4">4x4</option>
                                    <option value="5">5x5</option>
                                    <option value="6">6x6</option>
                                    <option value="7">7x7</option>
                                    <option value="8">8x8</option>
                                    <option value="9">9x9</option>
                                    <option value="10">10x10</option>
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Win Condition</label>
                                <select class="form-select" @bind="winCondition">
                                    @for (int i = 3; i <= Math.Min(boardSize, 6); i++)
                                    {
                                        <option value="@i">@i in a row</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <label class="form-label">AI Difficulty (for AI games)</label>
                                <select class="form-select" @bind="aiDifficulty">
                                    <option value="Easy">Easy</option>
                                    <option value="Medium">Medium</option>
                                    <option value="Hard">Hard</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-12">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="is3DMode" id="is3DModeLobby">
                                    <label class="form-check-label" for="is3DModeLobby">
                                        Enable 3D Mode (Multiple Layers)
                                    </label>
                                </div>
                                <small class="text-muted">When enabled, the game will have multiple layers equal to the board size</small>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card mb-3">
                    <div class="card-header">
                        <h5 class="mb-0">Start a Game</h5>
                    </div>
                    <div class="card-body">
                        <button class="btn btn-primary me-2" @onclick="StartAIGame">
                            ðŸ¤– Play vs AI
                        </button>
                        <button class="btn btn-secondary" @onclick="LeaveLobbyClick">
                            ðŸšª Leave Lobby
                        </button>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Online Players (@connectedUsers.Count)</h5>
                    </div>
                    <div class="card-body">
                        @if (connectedUsers.Count == 0)
                        {
                            <p class="text-muted">No other players online</p>
                        }
                        else
                        {
                            <div class="list-group">
                                @foreach (var user in connectedUsers.Where(u => u.ConnectionId != hubConnection?.ConnectionId))
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@user.Username</strong>
                                            <span class="badge @GetStatusBadgeClass(user.Status) ms-2">
                                                @GetStatusText(user.Status)
                                            </span>
                                        </div>
                                        @if (user.Status == UserStatus.Available)
                                        {
                                            <button class="btn btn-sm btn-primary" 
                                                    @onclick="() => InvitePlayer(user.ConnectionId)">
                                                Invite
                                            </button>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Invitations</h5>
                </div>
                <div class="card-body">
                    @if (pendingInvitations.Count == 0)
                    {
                        <p class="text-muted">No pending invitations</p>
                    }
                    else
                    {
                        @foreach (var invitation in pendingInvitations)
                        {
                            <div class="card mb-2">
                                <div class="card-body">
                                    <p class="mb-2"><strong>@invitation.Username</strong> invited you to play</p>
                                    <button class="btn btn-sm btn-success me-2" 
                                            @onclick="() => AcceptInvitation(invitation.ConnectionId)">
                                        Accept
                                    </button>
                                    <button class="btn btn-sm btn-danger" 
                                            @onclick="() => DeclineInvitation(invitation.ConnectionId)">
                                        Decline
                                    </button>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private string username = "";
    private bool isConnected = false;
    private string errorMessage = "";
    private List<ConnectedUser> connectedUsers = new();
    private List<(string ConnectionId, string Username)> pendingInvitations = new();
    private bool isInitialized = false;
    private int boardSize = 3;
    private int winCondition = 3;
    private string aiDifficulty = "Medium";
    private bool is3DMode = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;
            await InitializeAsync();
        }
    }

    private async Task InitializeAsync()
    {
        // Get username and game settings from session
        try
        {
            var result = await SessionStorage.GetAsync<string>("username");
            if (!result.Success || string.IsNullOrEmpty(result.Value))
            {
                Navigation.NavigateTo("/");
                return;
            }

            username = result.Value;

            // Load game settings
            var boardSizeResult = await SessionStorage.GetAsync<int>("boardSize");
            if (boardSizeResult.Success)
            {
                boardSize = boardSizeResult.Value;
            }

            var winConditionResult = await SessionStorage.GetAsync<int>("winCondition");
            if (winConditionResult.Success)
            {
                winCondition = winConditionResult.Value;
            }

            var aiDifficultyResult = await SessionStorage.GetAsync<string>("aiDifficulty");
            if (aiDifficultyResult.Success && !string.IsNullOrEmpty(aiDifficultyResult.Value))
            {
                aiDifficulty = aiDifficultyResult.Value;
            }

            var is3DModeResult = await SessionStorage.GetAsync<bool>("is3DMode");
            if (is3DModeResult.Success)
            {
                is3DMode = is3DModeResult.Value;
            }

        // Set up SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .WithAutomaticReconnect()
            .Build();

        // Register handlers
        hubConnection.On<string>("JoinedLobby", (username) =>
        {
            isConnected = true;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("OnUserConnected", (connectionId, username) =>
        {
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("OnUserDisconnected", (connectionId) =>
        {
            connectedUsers.RemoveAll(u => u.ConnectionId == connectionId);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<List<ConnectedUser>>("OnLobbyUpdated", (users) =>
        {
            connectedUsers = users;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string>("OnGameInvitation", (fromConnectionId, fromUsername) =>
        {
            pendingInvitations.Add((fromConnectionId, fromUsername));
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("OnInvitationDeclined", (connectionId) =>
        {
            errorMessage = "Your invitation was declined";
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GameState>("OnGameStarted", (gameState) =>
        {
            // Store game state in session and navigate to game page
            InvokeAsync(async () =>
            {
                await SessionStorage.SetAsync("currentGameId", gameState.GameId);
                await SessionStorage.SetAsync("currentGameState", gameState);
                
                // Leave lobby cleanly before navigating to avoid game being ended
                try
                {
                    await hubConnection.SendAsync("LeaveLobby");
                }
                catch
                {
                    // Ignore errors during cleanup
                }
                
                Navigation.NavigateTo("/game");
            });
        });

        hubConnection.On<string>("Error", (message) =>
        {
            errorMessage = message;
            InvokeAsync(StateHasChanged);
        });

        // Start connection
        try
        {
            await hubConnection.StartAsync();
            await hubConnection.SendAsync("JoinLobby", username);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error connecting to server: {ex.Message}";
        }

        StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Initialization error: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task SaveConfiguration()
    {
        // Save current configuration to session storage
        await SessionStorage.SetAsync("boardSize", boardSize);
        await SessionStorage.SetAsync("winCondition", winCondition);
        await SessionStorage.SetAsync("aiDifficulty", aiDifficulty);
        await SessionStorage.SetAsync("is3DMode", is3DMode);
    }

    private async Task InvitePlayer(string targetConnectionId)
    {
        if (hubConnection is not null)
        {
            try
            {
                await SaveConfiguration();
                await hubConnection.SendAsync("InvitePlayer", targetConnectionId);
            }
            catch (Exception ex)
            {
                errorMessage = $"Error sending invitation: {ex.Message}";
            }
        }
    }

    private async Task AcceptInvitation(string inviterConnectionId)
    {
        if (hubConnection is not null)
        {
            try
            {
                await SaveConfiguration();
                await hubConnection.SendAsync("AcceptInvitation", inviterConnectionId);
                pendingInvitations.RemoveAll(i => i.ConnectionId == inviterConnectionId);
            }
            catch (Exception ex)
            {
                errorMessage = $"Error accepting invitation: {ex.Message}";
            }
        }
    }

    private async Task DeclineInvitation(string inviterConnectionId)
    {
        if (hubConnection is not null)
        {
            try
            {
                await hubConnection.SendAsync("DeclineInvitation", inviterConnectionId);
                pendingInvitations.RemoveAll(i => i.ConnectionId == inviterConnectionId);
            }
            catch (Exception ex)
            {
                errorMessage = $"Error declining invitation: {ex.Message}";
            }
        }
    }

    private async Task StartAIGame()
    {
        if (hubConnection is not null)
        {
            try
            {
                await SaveConfiguration();
                await hubConnection.SendAsync("StartGameWithAI", boardSize, winCondition, aiDifficulty, is3DMode);
            }
            catch (Exception ex)
            {
                errorMessage = $"Error starting AI game: {ex.Message}";
            }
        }
    }

    private async Task LeaveLobbyClick()
    {
        // Clear the username from session storage
        await SessionStorage.DeleteAsync("username");
        Navigation.NavigateTo("/");
    }

    private string GetStatusBadgeClass(UserStatus status)
    {
        return status switch
        {
            UserStatus.Available => "bg-success",
            UserStatus.InGame => "bg-primary",
            UserStatus.PendingInvitation => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private string GetStatusText(UserStatus status)
    {
        return status switch
        {
            UserStatus.Available => "Available",
            UserStatus.InGame => "In Game",
            UserStatus.PendingInvitation => "Busy",
            _ => "Unknown"
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
